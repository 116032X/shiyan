?      public void nextWorld() {
?          char[][] temp = new char[HEIGHT][WIDTH];
?          int y=0;//坐标位置(x,y)
?          for (char[] rowArr : world){
?              int x=0;
?              for(char colData :rowArr ){
?                  int neighbor = getNeighbors(y, x);//习惯(y, x)
?                  if (neighbor==3) {
?                      temp[y][x] = Y;
?                  }else if (neighbor == 2 && colData == Y){
?                      temp[y][x] = Y;
?                  }else{
?                      temp[y][x] = No; 
?                  }
?                  x++;
?              }
?              y++;
?          }

助手方法getNeighbors(int row,int col)，计算指定坐标位置(x,y)或(row，col)格子邻居的数量；
?      private int getNeighbors(int y,int x) {
?          int n = 0; //neighbor
?          n += cellState( y - 1, x - 1);
?          n += cellState( y - 1, x);
?          n += cellState( y - 1, x + 1);
?          n += cellState( y, x - 1);
?          n += cellState( y, x + 1);
?          n += cellState( y + 1, x - 1);
?          n += cellState( y + 1, x);
?          n += cellState( y + 1, x + 1);
?          return n;
?   
?   
?      }

cellState(int y,int x)，返回指定坐标(x,y)的格子中细胞状况值，即是否存在细胞。为了方便getNeighbors调用它，返回值不是boolean而是0与1。
?      private int cellState(int y,int x) {
?          boolean isEmpty = (y < 0 || y >= HEIGHT || x < 0 || x >= WIDTH || world[y][x] != Y ) ;
?          return isEmpty ? 0 : 1 ;
?      }